[{"/home/ethan/webDev/pf2e-sheet/src/index.tsx":"1","/home/ethan/webDev/pf2e-sheet/src/components/AttributeHotbar/AttributeHotbar.tsx":"2","/home/ethan/webDev/pf2e-sheet/src/components/HealthBar/HealthBar.tsx":"3","/home/ethan/webDev/pf2e-sheet/src/components/Attributes/Attributes.tsx":"4","/home/ethan/webDev/pf2e-sheet/src/components/LevelZero/LevelZero.tsx":"5","/home/ethan/webDev/pf2e-sheet/src/components/Skills/Skills.tsx":"6"},{"size":513,"mtime":1610062525018,"results":"7","hashOfConfig":"8"},{"size":1931,"mtime":1609998642846,"results":"9","hashOfConfig":"8"},{"size":465,"mtime":1610059650643,"results":"10","hashOfConfig":"8"},{"size":503,"mtime":1609998094446,"results":"11","hashOfConfig":"8"},{"size":2733,"mtime":1610063221023,"results":"12","hashOfConfig":"8"},{"size":1239,"mtime":1610064659731,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"15xfxrz",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ethan/webDev/pf2e-sheet/src/index.tsx",[],[],"/home/ethan/webDev/pf2e-sheet/src/components/AttributeHotbar/AttributeHotbar.tsx",["28"],"import * as React from 'react';\nimport './AttributeHotbar.css';\nimport Attributes from '../Attributes/Attributes';\nimport { AttributeResponse } from 'src/lib/api/types';\n\nexport default class AttributeHotbar extends React.Component {\n  state: AttributeResponse[] = [\n    { name: 'mmm', base: 0, modifier: 0 },\n    { name: 'mmm', base: 0, modifier: 0 },\n    { name: 'mmm', base: 0, modifier: 0 },\n    { name: 'mmm', base: 0, modifier: 0 },\n    { name: 'mmm', base: 0, modifier: 0 },\n    { name: 'mmm', base: 0, modifier: 0 }\n  ];\n\n  componentWillMount() {\n    this.getAttributes();\n  }\n\n  getAttributes: any = () => {\n    fetch('http://localhost:1234/attributes', {\n      cache: 'no-cache',\n      mode: 'cors',\n      credentials: 'same-origin'\n    })\n      .then((response) => response.json())\n      .then((response: AttributeResponse[]) => this.setState(response));\n  };\n\n  render() {\n    return (\n      <div className=\"attribute-hotbar\">\n        <Attributes\n          name={this.state[0].name.toUpperCase()}\n          base={this.state[0].base}\n          modifier={this.state[0].modifier}\n        />\n        <Attributes\n          name={this.state[1].name.toUpperCase()}\n          base={this.state[1].base}\n          modifier={this.state[1].modifier}\n        />\n        <Attributes\n          name={this.state[2].name.toUpperCase()}\n          base={this.state[2].base}\n          modifier={this.state[2].modifier}\n        />\n        <Attributes\n          name={this.state[3].name.toUpperCase()}\n          base={this.state[3].base}\n          modifier={this.state[3].modifier}\n        />\n        <Attributes\n          name={this.state[4].name.toUpperCase()}\n          base={this.state[4].base}\n          modifier={this.state[4].modifier}\n        />\n        <Attributes\n          name={this.state[5].name.toUpperCase()}\n          base={this.state[5].base}\n          modifier={this.state[5].modifier}\n        />\n      </div>\n    );\n  }\n}\n","/home/ethan/webDev/pf2e-sheet/src/components/HealthBar/HealthBar.tsx",[],"/home/ethan/webDev/pf2e-sheet/src/components/Attributes/Attributes.tsx",[],"/home/ethan/webDev/pf2e-sheet/src/components/LevelZero/LevelZero.tsx",[],"/home/ethan/webDev/pf2e-sheet/src/components/Skills/Skills.tsx",[],{"ruleId":"29","severity":1,"message":"30","line":20,"column":18,"nodeType":"31","messageId":"32","endLine":20,"endColumn":21,"suggestions":"33"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["34","35"],{"messageId":"36","fix":"37","desc":"38"},{"messageId":"39","fix":"40","desc":"41"},"suggestUnknown",{"range":"42","text":"43"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"42","text":"44"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[603,606],"unknown","never"]